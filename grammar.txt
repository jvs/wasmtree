```
import struct
```

class Module {
    magic: b'\x00\x61\x73\x6D'
    version: b'\x01\x00\x00\x00'
    custom1: CustomSection*
    typesec: TypeSection?
    custom2: CustomSection*
}


# Sections.
class CustomSection {
    id: 0x00
    size: u32
    name: let loc = LocatedName in `loc.name`
    body: ByteString(`size - (loc.end - loc.start)`)
}

class TypeSection {
    id: 0x01
    size: u32
    func_types: vec(FuncType)
}


# Types.
class FuncType {
    params: 0x60 >> vec(ValueType)
    results: vec(ValueType)
}

ValueType = NumberType | ReferenceType

NumberType = (
    0x7F >> `'i32'`
    | 0x7E >> `'i64'`
    | 0x7D >> `'f32'`
    | 0x7C >> `'f64'`
)

ReferenceType = (
    0x70 >> `'funcref'`
    | 0x6F >> `'externref'`
)


# Vectors.
vec(element) =>
    let length = u32 in
    element{length}


# Uninterpreted bytes.
ByteString(size) => bytechar{size} |> `lambda x: b''.join(x)`
bytechar = b/[\x00-\xFF]/


# Names.
Name = vec(bytechar) |> `lambda x: b''.join(x).decode('utf8')`


class LocatedName {
    start: `_pos`
    name: Name
    end: `_pos`
}


# Numbers.
byte = b/[\x00-\xFF]/ |> `ord`
u32 = UnsignedInt
i32 = SignedInt
i64 = SignedInt
f32 = b/[\x00-\xFF]{4}/ |> `lambda x: struct.unpack('<f', x)[0]`
f64 = b/[\x00-\xFF]{8}/ |> `lambda x: struct.unpack('<d', x)[0]`

SignedInt = LEB128 |> `decode_signed_int`
UnsignedInt = LEB128 |> `decode_unsigned_int`
LEB128 = b/[\x80-\xFF]*[\x00-\x7F]/

```
continue_flag = 1 << 7

def decode_signed_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    sign = 1 << 6
    if b & sign:
        result |= (~0 << shift)

    return result

def decode_unsigned_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    return result
```
