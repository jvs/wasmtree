```
import struct
```

class Module {
    let magic: b'\x00\x61\x73\x6D'
    let version: b'\x01\x00\x00\x00'

    custom1: CustomSection*

    type_section: TypeSection?
    custom2: CustomSection*

    import_section: ImportSection?
    custom3: CustomSection*
}


# Sections.
class CustomSection {
    let id: 0x00
    let size: u32
    let loc: LocatedName
    let remaining = `size - (loc.end - loc.start)`

    name: `loc.name`
    body: ByteString(remaining)
}

class TypeSection {
    let id: 0x01
    let size: u32
    func_types: vec(FuncType)
}

class ImportSection {
    let id: 0x02
    imports: vec(Import)
}


# Imports.
class Import {
    module: Name
    name: Name
    descriptor: ImportDescriptor
}

ImportDescriptor = ImportFunc | ImportTable | ImportMemory | ImportGlobal

class ImportFunc {
    let id: 0x00
    type_index: u32
}

class ImportTable {
    let id: 0x01
    table_type: TableType
}

class ImportMemory {
    let id: 0x02
    limits: Limits
}

class ImportGlobal {
    let id: 0x03
    type: GlobalType
}


# Tables.
class TableType {
    elements: ReferenceType
    limits: Limits
}


# Limits.
Limits = MinLimit | MinMaxLimits

class MinLimit {
    let id: 0x00
    min: u32
    max: `None`
}

class MinMaxLimits {
    let id: 0x01
    min: u32
    max: u32
}


# Types.
class FuncType {
    let id: 0x60
    params: vec(ValueType)
    results: vec(ValueType)
}

class GlobalType {
    type: ValueType
    modifier: 0x00 >> `'const'` | 0x01 >> `'var'`
}

ValueType = NumberType | ReferenceType

NumberType = (
    0x7F >> `'i32'`
    | 0x7E >> `'i64'`
    | 0x7D >> `'f32'`
    | 0x7C >> `'f64'`
)

ReferenceType = (
    0x70 >> `'funcref'`
    | 0x6F >> `'externref'`
)


# Vectors.
vec(element) =>
    let length = u32 in
    element{length}


# Uninterpreted bytes.
ByteString(size) => bytechar{size} |> `lambda x: b''.join(x)`
bytechar = b/[\x00-\xFF]/


# Names.
Name = vec(bytechar) |> `lambda x: b''.join(x).decode('utf8')`


class LocatedName {
    start: `_pos`
    name: Name
    end: `_pos`
}


# Numbers.
byte = b/[\x00-\xFF]/ |> `ord`
u32 = UnsignedInt
i32 = SignedInt
i64 = SignedInt
f32 = b/[\x00-\xFF]{4}/ |> `lambda x: struct.unpack('<f', x)[0]`
f64 = b/[\x00-\xFF]{8}/ |> `lambda x: struct.unpack('<d', x)[0]`

SignedInt = LEB128 |> `decode_signed_int`
UnsignedInt = LEB128 |> `decode_unsigned_int`
LEB128 = b/[\x80-\xFF]*[\x00-\x7F]/

```
continue_flag = 1 << 7

def decode_signed_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    sign = 1 << 6
    if b & sign:
        result |= (~0 << shift)

    return result

def decode_unsigned_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    return result
```
