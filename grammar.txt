```
import struct
```

class Module {
    let magic: b'\x00\x61\x73\x6D'
    let version: b'\x01\x00\x00\x00'

    custom1: CustomSection*

    type_section: TypeSection?
    custom2: CustomSection*

    import_section: ImportSection?
    custom3: CustomSection*

    function_section: FunctionSection?
    custom4: CustomSection*

    table_section: TableSection?
    custom5: CustomSection*

    memory_section: MemorySection?
    custom6: CustomSection*

    global_section: GlobalSection?
    custom7: CustomSection*

    export_section: ExportSection?
    custom8: CustomSection*

    start_section: StartSection?
    custom9: CustomSection*

    element_section: ElementSection?
    custom10: CustomSection*

    data_count_section: DataCountSection?
    custom11: CustomSection*

    code_section: CodeSection?
    custom12: CustomSection*

    data_section: DataSection?
    custom13: CustomSection*
}


# Sections.
class CustomSection {
    let id: 0x00
    let size: u32
    let loc: LocatedName
    let remaining = `size - (loc.end - loc.start)`

    name: `loc.name`
    body: ByteString(remaining)
}

class TypeSection {
    let id: 0x01
    let size: u32
    function_types: vec(FunctionType)
}

class ImportSection {
    let id: 0x02
    let size: u32
    imports: vec(Import)
}

class FunctionSection {
    let id: 0x03
    let size: u32
    type_indexes: vec(TypeIndex)
}

class TableSection {
    let id: 0x04
    let size: u32
    table_types: vec(TableType)
}

class MemorySection {
    let id: 0x05
    let size: u32
    memory_types: vec(MemoryType)
}

class GlobalSection {
    let id: 0x06
    let size: u32
    globals: vec(Global)
}

class ExportSection {
    let id: 0x07
    let size: u32
    exports: vec(Export)
}

class StartSection {
    let id: 0x08
    let size: u32
    index: FunctionIndex
}

class ElementSection {
    let id: 0x09
    let size: u32
    segments: vec(ElementSegment)
}

class DataCountSection {
    let id: 0x0C
    let size: u32
    count: Opt(u32 where `lambda _: size > 0`)
}

class CodeSection {
    let id: 0x0A
    let size: u32
    entries: vec(CodeEntry)
}

class DataSection {
    let id: 0x0B
    let size: u32
    segments: vec(ActiveDataSegment | PassiveDataSegment | ActiveIndexDataSegment)
}


# Globals.
class Global {
    type: GlobalType
    initializer: Expression
}


# Imports.
class Import {
    module: Name
    name: Name
    descriptor: ImportFunc | ImportTable | ImportMemory | ImportGlobal
}

class ImportFunc { let id: 0x00; type: TypeIndex }
class ImportTable { let id: 0x01; type: TableType }
class ImportMemory { let id: 0x02; type: MemoryType }
class ImportGlobal { let id: 0x03; type: GlobalType }


# Exports.
class Export {
    name: Name
    descriptor: ExportFunc | ExportTable | ExportMemory | ExportGlobal
}

class ExportFunc { let id: 0x00; index: FunctionIndex }
class ExportTable { let id: 0x01; index: TableIndex }
class ExportMemory { let id: 0x02; index: MemoryIndex }
class ExportGlobal { let id: 0x03; index: GlobalIndex }


# Element segments.
ElementSegment = (
    DefaultSegment
    | PassiveFuncRefSegment
    | ActiveFuncRefSegment
    | DeclarativeFuncRefSegment
    | DefaultExpressionSegment
    | PassiveExpressionSegment
    | ActiveExpressionSegment
    | DeclarativeExpressionSegment
)

class DefaultSegment {
    let id: 0x00
    offset: Expression
    function_indexes: vec(FunctionIndex)
}

class PassiveFuncRefSegment {
    let id: 0x01
    type: 0x00 >> `'funcref'`
    function_indexes: vec(FunctionIndex)
}

class ActiveFuncRefSegment {
    let id: 0x02
    table_index: TableIndex
    offset: Expression
    type: 0x00 >> `'funcref'`
    function_indexes: vec(FunctionIndex)
}

class DeclarativeFuncRefSegment {
    let id: 0x03
    type: 0x00 >> `'funcref'`
    function_indexes: vec(FunctionIndex)
}

class DefaultExpressionSegment {
    let id: 0x04
    offset: Expression
    initializers: vec(Expression)
}

class PassiveExpressionSegment {
    let id: 0x05
    type: ReferenceType
    initializers: vec(Expression)
}

class ActiveExpressionSegment {
    let id: 0x06
    table_index: TableIndex
    offset: Expression
    type: ReferenceType
    initializers: vec(Expression)
}

class DeclarativeExpressionSegment {
    let id: 0x07
    type: ReferenceType
    initializers: vec(Expression)
}


# Data segments.
class ActiveDataSegment {
    let id: 0x00
    offset: Expression
    contents: ByteVector
}

class PassiveDataSegment {
    let id: 0x01
    contents: ByteVector
}

class ActiveIndexDataSegment {
    let id: 0x02
    index: MemoryIndex
    offset: Expression
    contents: ByteVector
}


# Limits.
Limits = MinLimit | MinMaxLimits

class MinLimit {
    let id: 0x00
    min: u32
}

class MinMaxLimits {
    let id: 0x01
    min: u32
    max: u32
}


# Types.
DataIndex = u32
FunctionIndex = u32
ElementIndex = u32
GlobalIndex = u32
LabelIndex = u32
LocalIndex = u32
MemoryIndex = u32
TableIndex = u32
TypeIndex = u32

BlockType = 0x40 >> `'empty'` | ValueType | SignedInt

class FunctionType {
    let id: 0x60
    parameter_types: vec(ValueType)
    result_types: vec(ValueType)
}

class GlobalType {
    type: ValueType
    modifier: 0x00 >> `'const'` | 0x01 >> `'var'`
}

class MemoryType {
    limits: Limits
}

NumberType = (
    0x7F >> `'i32'`
    | 0x7E >> `'i64'`
    | 0x7D >> `'f32'`
    | 0x7C >> `'f64'`
)

class TableType {
    type: ReferenceType
    limits: Limits
}

ReferenceType = 0x70 >> `'funcref'` | 0x6F >> `'externref'`
ValueType = NumberType | ReferenceType


# Vectors.
vec(element) =>
    let length = u32 in
    element{length}


# Uninterpreted bytes.
ByteString(size) => bytechar{size} |> `lambda x: b''.join(x)`
ByteVector => vec(bytechar) |> `lambda x: b''.join(x)`
bytechar = b/[\x00-\xFF]/


# Names.
Name = vec(bytechar) |> `lambda x: b''.join(x).decode('utf8')`


class LocatedName {
    start: `_pos`
    name: Name
    end: `_pos`
}


# Numbers.
byte = b/[\x00-\xFF]/ |> `ord`
u32 = UnsignedInt
i32 = SignedInt
i64 = SignedInt
f32 = b/[\x00-\xFF]{4}/ |> `lambda x: struct.unpack('<f', x)[0]`
f64 = b/[\x00-\xFF]{8}/ |> `lambda x: struct.unpack('<d', x)[0]`

SignedInt = LEB128 |> `decode_signed_int`
UnsignedInt = LEB128 |> `decode_unsigned_int`
LEB128 = b/[\x80-\xFF]*[\x00-\x7F]/

```
continue_flag = 1 << 7

def decode_signed_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    sign = 1 << 6
    if b & sign:
        result |= (~0 << shift)

    return result

def decode_unsigned_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    return result
```


# Code.
class CodeEntry {
    let size: u32
    locals: vec(Locals)
    expression: Expression
}

class Locals {
    count: u32
    type: ValueType
}


# Instructions.
Expression => Instruction* << 0x0B

Instruction = (
    unreachable
    | nop
    | Block
    | Loop
    | If
    | br
    | br_if
    | br_table
    | ret
    | call
    | call_indirect
    | ref_null
    | ref_is_null
    | ref_func
    | drop
    | select
    | select_t
    | local_get
    | local_set
    | local_tee
    | global_get
    | global_set
    | table_get
    | table_set
    | i32_load
    | i64_load
    | f32_load
    | f64_load
    | i32_load8_s
    | i32_load8_u
    | i32_load16_s
    | i32_load16_u
    | i64_load8_s
    | i64_load8_u
    | i64_load16_s
    | i64_load16_u
    | i64_load32_s
    | i64_load32_u
    | i32_store
    | i64_store
    | f32_store
    | f64_store
    | i32_store8
    | i32_store16
    | i64_store8
    | i64_store16
    | i64_store32
    | memory_size
    | memory_grow
    | i32_const
    | i64_const
    | f32_const
    | f64_const
    | i32_eqz
    | i32_eq
    | i32_ne
    | i32_lt_s
    | i32_lt_u
    | i32_gt_s
    | i32_gt_u
    | i32_le_s
    | i32_le_u
    | i32_ge_s
    | i32_ge_u
    | i64_eqz
    | i64_eq
    | i64_ne
    | i64_lt_s
    | i64_lt_u
    | i64_gt_s
    | i64_gt_u
    | i64_le_s
    | i64_le_u
    | i64_ge_s
    | i64_ge_u
    | f32_eq
    | f32_ne
    | f32_lt
    | f32_gt
    | f32_le
    | f32_ge
    | f64_eq
    | f64_ne
    | f64_lt
    | f64_gt
    | f64_le
    | f64_ge
    | i32_clz
    | i32_ctz
    | i32_popcnt
    | i32_add
    | i32_sub
    | i32_mul
    | i32_div_s
    | i32_div_u
    | i32_rem_s
    | i32_rem_u
    | i32_and
    | i32_or
    | i32_xor
    | i32_shl
    | i32_shr_s
    | i32_shr_u
    | i32_rotl
    | i32_rotr
    | i64_clz
    | i64_ctz
    | i64_popcnt
    | i64_add
    | i64_sub
    | i64_mul
    | i64_div_s
    | i64_div_u
    | i64_rem_s
    | i64_rem_u
    | i64_and
    | i64_or
    | i64_xor
    | i64_shl
    | i64_shr_s
    | i64_shr_u
    | i64_rotl
    | i64_rotr
    | f32_abs
    | f32_neg
    | f32_ceil
    | f32_floor
    | f32_trunc
    | f32_nearest
    | f32_sqrt
    | f32_add
    | f32_sub
    | f32_mul
    | f32_div
    | f32_min
    | f32_max
    | f32_copysign
    | f64_abs
    | f64_neg
    | f64_ceil
    | f64_floor
    | f64_trunc
    | f64_nearest
    | f64_sqrt
    | f64_add
    | f64_sub
    | f64_mul
    | f64_div
    | f64_min
    | f64_max
    | f64_copysign
    | i32_wrap_i64
    | i32_trunc_f32_s
    | i32_trunc_f32_u
    | i32_trunc_f64_s
    | i32_trunc_f64_u
    | i64_extend_i32_s
    | i64_extend_i32_u
    | i64_trunc_f32_s
    | i64_trunc_f32_u
    | i64_trunc_f64_s
    | i64_trunc_f64_u
    | f32_convert_i32_s
    | f32_convert_i32_u
    | f32_convert_i64_s
    | f32_convert_i64_u
    | f32_demote_f64
    | f64_convert_i32_s
    | f64_convert_i32_u
    | f64_convert_i64_s
    | f64_convert_i64_u
    | f64_promote_f32
    | i32_reinterpret_f32
    | i64_reinterpret_f64
    | f32_reinterpret_i32
    | f64_reinterpret_i64
    | i32_extend8_s
    | i32_extend16_s
    | i64_extend8_s
    | i64_extend16_s
    | i64_extend32_s
    | i32_trunc_sat_f32_s
    | i32_trunc_sat_f32_u
    | i32_trunc_sat_f64_s
    | i32_trunc_sat_f64_u
    | i64_trunc_sat_f32_s
    | i64_trunc_sat_f32_u
    | i64_trunc_sat_f64_s
    | i64_trunc_sat_f64_u
    | memory_init
    | data_drop
    | memory_copy
    | memory_fill
    | table_init
    | elem_drop
    | table_copy
    | table_grow
    | table_size
    | table_fill
)

class unreachable { let id: 0x00 }
class nop { let id: 0x01 }

class Block {
    let id: 0x02
    type: BlockType
    body: Expression
}

class Loop {
    let id: 0x03
    type: BlockType
    body: Expression
}

class If {
    let id: 0x04
    type: BlockType
    true_case: Instruction* << Expect(0x05 | 0x0B)
    false_case: Opt(0x05 >> Instruction*) << 0x0B
}

class br {
    let id: 0x0C
    label: LabelIndex
}

class br_if {
    let id: 0x0D
    label: LabelIndex
}

class br_table {
    let id: 0x0E
    labels: vec(LabelIndex)
    default: LabelIndex
}

class ret {
    let id: 0x0F
}

class call {
    let id: 0x10
    function: FunctionIndex
}

class call_indirect {
    let id: 0x11
    type_index: TypeIndex
    table_index: TableIndex
}

class ref_null { let id: 0xD0; type: ReferenceType }
class ref_is_null { let id: 0xD1 }
class ref_func { let id: 0xD2; function: FunctionIndex }

class drop { let id: 0x1A }
class select { let id: 0x1B }
class select_t { let id: 0x1C; types: vec(ValueType) }

class local_get { let id: 0x20; index: LocalIndex }
class local_set { let id: 0x21; index: LocalIndex }
class local_tee { let id: 0x22; index: LocalIndex }
class global_get { let id: 0x23; index: GlobalIndex }
class global_set { let id: 0x24; index: GlobalIndex }

class table_get { let id: 0x25; index: TableIndex }
class table_set { let id: 0x26; index: TableIndex }

class i32_load { let id: 0x28; align: u32; offset: u32 }
class i64_load { let id: 0x29; align: u32; offset: u32 }
class f32_load { let id: 0x2A; align: u32; offset: u32 }
class f64_load { let id: 0x2B; align: u32; offset: u32 }
class i32_load8_s { let id: 0x2C; align: u32; offset: u32 }
class i32_load8_u { let id: 0x2D; align: u32; offset: u32 }
class i32_load16_s { let id: 0x2E; align: u32; offset: u32 }
class i32_load16_u { let id: 0x2F; align: u32; offset: u32 }
class i64_load8_s { let id: 0x30; align: u32; offset: u32 }
class i64_load8_u { let id: 0x31; align: u32; offset: u32 }
class i64_load16_s { let id: 0x32; align: u32; offset: u32 }
class i64_load16_u { let id: 0x33; align: u32; offset: u32 }
class i64_load32_s { let id: 0x34; align: u32; offset: u32 }
class i64_load32_u { let id: 0x35; align: u32; offset: u32 }
class i32_store { let id: 0x36; align: u32; offset: u32 }
class i64_store { let id: 0x37; align: u32; offset: u32 }
class f32_store { let id: 0x38; align: u32; offset: u32 }
class f64_store { let id: 0x39; align: u32; offset: u32 }
class i32_store8 { let id: 0x3A; align: u32; offset: u32 }
class i32_store16 { let id: 0x3B; align: u32; offset: u32 }
class i64_store8 { let id: 0x3C; align: u32; offset: u32 }
class i64_store16 { let id: 0x3D; align: u32; offset: u32 }
class i64_store32 { let id: 0x3E; align: u32; offset: u32 }

class memory_size { let id: 0x3F; let zero: 0x00 }
class memory_grow { let id: 0x40; let zero: 0x00 }

class i32_const { let id: 0x41; number: i32 }
class i64_const { let id: 0x42; number: i64 }
class f32_const { let id: 0x43; number: f32 }
class f64_const { let id: 0x44; number: f64 }

class i32_eqz { let id: 0x45 }
class i32_eq { let id: 0x46 }
class i32_ne { let id: 0x47 }
class i32_lt_s { let id: 0x48 }
class i32_lt_u { let id: 0x49 }
class i32_gt_s { let id: 0x4A }
class i32_gt_u { let id: 0x4B }
class i32_le_s { let id: 0x4C }
class i32_le_u { let id: 0x4D }
class i32_ge_s { let id: 0x4E }
class i32_ge_u { let id: 0x4F }

class i64_eqz { let id: 0x50 }
class i64_eq { let id: 0x51 }
class i64_ne { let id: 0x52 }
class i64_lt_s { let id: 0x53 }
class i64_lt_u { let id: 0x54 }
class i64_gt_s { let id: 0x55 }
class i64_gt_u { let id: 0x56 }
class i64_le_s { let id: 0x57 }
class i64_le_u { let id: 0x58 }
class i64_ge_s { let id: 0x59 }
class i64_ge_u { let id: 0x5A }

class f32_eq { let id: 0x5B }
class f32_ne { let id: 0x5C }
class f32_lt { let id: 0x5D }
class f32_gt { let id: 0x5E }
class f32_le { let id: 0x5F }
class f32_ge { let id: 0x60 }

class f64_eq { let id: 0x61 }
class f64_ne { let id: 0x62 }
class f64_lt { let id: 0x63 }
class f64_gt { let id: 0x64 }
class f64_le { let id: 0x65 }
class f64_ge { let id: 0x66 }

class i32_clz { let id: 0x67 }
class i32_ctz { let id: 0x68 }
class i32_popcnt { let id: 0x69 }
class i32_add { let id: 0x6A }
class i32_sub { let id: 0x6B }
class i32_mul { let id: 0x6C }
class i32_div_s { let id: 0x6D }
class i32_div_u { let id: 0x6E }
class i32_rem_s { let id: 0x6F }
class i32_rem_u { let id: 0x70 }
class i32_and { let id: 0x71 }
class i32_or { let id: 0x72 }
class i32_xor { let id: 0x73 }
class i32_shl { let id: 0x74 }
class i32_shr_s { let id: 0x75 }
class i32_shr_u { let id: 0x76 }
class i32_rotl { let id: 0x77 }
class i32_rotr { let id: 0x78 }

class i64_clz { let id: 0x79 }
class i64_ctz { let id: 0x7A }
class i64_popcnt { let id: 0x7B }
class i64_add { let id: 0x7C }
class i64_sub { let id: 0x7D }
class i64_mul { let id: 0x7E }
class i64_div_s { let id: 0x7F }
class i64_div_u { let id: 0x80 }
class i64_rem_s { let id: 0x81 }
class i64_rem_u { let id: 0x82 }
class i64_and { let id: 0x83 }
class i64_or { let id: 0x84 }
class i64_xor { let id: 0x85 }
class i64_shl { let id: 0x86 }
class i64_shr_s { let id: 0x87 }
class i64_shr_u { let id: 0x88 }
class i64_rotl { let id: 0x89 }
class i64_rotr { let id: 0x8A }

class f32_abs { let id: 0x8B }
class f32_neg { let id: 0x8C }
class f32_ceil { let id: 0x8D }
class f32_floor { let id: 0x8E }
class f32_trunc { let id: 0x8F }
class f32_nearest { let id: 0x90 }
class f32_sqrt { let id: 0x91 }
class f32_add { let id: 0x92 }
class f32_sub { let id: 0x93 }
class f32_mul { let id: 0x94 }
class f32_div { let id: 0x95 }
class f32_min { let id: 0x96 }
class f32_max { let id: 0x97 }
class f32_copysign { let id: 0x98 }

class f64_abs { let id: 0x99 }
class f64_neg { let id: 0x9A }
class f64_ceil { let id: 0x9B }
class f64_floor { let id: 0x9C }
class f64_trunc { let id: 0x9D }
class f64_nearest { let id: 0x9E }
class f64_sqrt { let id: 0x9F }
class f64_add { let id: 0xA0 }
class f64_sub { let id: 0xA1 }
class f64_mul { let id: 0xA2 }
class f64_div { let id: 0xA3 }
class f64_min { let id: 0xA4 }
class f64_max { let id: 0xA5 }
class f64_copysign { let id: 0xA6 }

class i32_wrap_i64 { let id: 0xA7 }
class i32_trunc_f32_s { let id: 0xA8 }
class i32_trunc_f32_u { let id: 0xA9 }
class i32_trunc_f64_s { let id: 0xAA }
class i32_trunc_f64_u { let id: 0xAB }
class i64_extend_i32_s { let id: 0xAC }
class i64_extend_i32_u { let id: 0xAD }
class i64_trunc_f32_s { let id: 0xAE }
class i64_trunc_f32_u { let id: 0xAF }
class i64_trunc_f64_s { let id: 0xB0 }
class i64_trunc_f64_u { let id: 0xB1 }
class f32_convert_i32_s { let id: 0xB2 }
class f32_convert_i32_u { let id: 0xB3 }
class f32_convert_i64_s { let id: 0xB4 }
class f32_convert_i64_u { let id: 0xB5 }
class f32_demote_f64 { let id: 0xB6 }
class f64_convert_i32_s { let id: 0xB7 }
class f64_convert_i32_u { let id: 0xB8 }
class f64_convert_i64_s { let id: 0xB9 }
class f64_convert_i64_u { let id: 0xBA }
class f64_promote_f32 { let id: 0xBB }
class i32_reinterpret_f32 { let id: 0xBC }
class i64_reinterpret_f64 { let id: 0xBD }
class f32_reinterpret_i32 { let id: 0xBE }
class f64_reinterpret_i64 { let id: 0xBF }

class i32_extend8_s { let id: 0xC0 }
class i32_extend16_s { let id: 0xC1 }
class i64_extend8_s { let id: 0xC2 }
class i64_extend16_s { let id: 0xC3 }
class i64_extend32_s { let id: 0xC4 }

class i32_trunc_sat_f32_s { let id: 0xFC; let code: 0x00 }
class i32_trunc_sat_f32_u { let id: 0xFC; let code: 0x01 }
class i32_trunc_sat_f64_s { let id: 0xFC; let code: 0x02 }
class i32_trunc_sat_f64_u { let id: 0xFC; let code: 0x03 }
class i64_trunc_sat_f32_s { let id: 0xFC; let code: 0x04 }
class i64_trunc_sat_f32_u { let id: 0xFC; let code: 0x05 }
class i64_trunc_sat_f64_s { let id: 0xFC; let code: 0x06 }
class i64_trunc_sat_f64_u { let id: 0xFC; let code: 0x07 }

class memory_init {
    let id: 0xFC
    let code: 0x08
    data_index: DataIndex
    let zero: 0x00
}

class data_drop {
    let id: 0xFC
    let code: 0x09
    data_index: DataIndex
}

class memory_copy {
    let id: 0xFC
    let code: 0x0A
    let zeros: b'\x00\x00'
}

class memory_fill {
    let id: 0xFC
    let code: 0x0B
    let zero: 0x00
}

class table_init {
    let id: 0xFC
    let code: 0x0C
    element: ElementIndex
    table: TableIndex
}

class elem_drop {
    let id: 0xFC
    let code: 0x0D
    element: ElementIndex
}

class table_copy {
    let id: 0xFC
    let code: 0x0E
    destination: TableIndex
    source: TableIndex
}

class table_grow { let id: 0xFC; let code: 0x0F; table: TableIndex }
class table_size { let id: 0xFC; let code: 0x10; table: TableIndex }
class table_fill { let id: 0xFC; let code: 0x11; table: TableIndex }
