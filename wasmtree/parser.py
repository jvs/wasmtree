# Generated by ../generate_parser.py
"""
# Grammar definition:
```
import struct
```

vec(element) =>
    let length = u32 in
    element{length}

name = vec(char) |> `lambda bytes: b''.join(bytes).decode('utf8')`
char = b/[\\x00-\\xFF]/

byte = b/[\\x00-\\xFF]/ |> `ord`

u32 = UnsignedInt
i32 = SignedInt
i64 = SignedInt
f32 = b/[\\x00-\\xFF]{4}/ |> `lambda x: struct.unpack('<f', x)[0]`
f64 = b/[\\x00-\\xFF]{8}/ |> `lambda x: struct.unpack('<d', x)[0]`

SignedInt = LEB128 |> `decode_signed_int`
UnsignedInt = LEB128 |> `decode_unsigned_int`

LEB128 = b/[\\x80-\\xFF]*[\\x00-\\x7F]/

```
continue_flag = 1 << 7

def decode_signed_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    sign = 1 << 6
    if b & sign:
        result |= (~0 << shift)

    return result

def decode_unsigned_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    return result
```


"""

from collections import namedtuple as _nt
from re import compile as _compile_re, IGNORECASE as _IGNORECASE

class Node:
    _fields = ()

    def __init__(self):
        self._metadata = _Metadata()

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for field in self._fields:
            if getattr(self, field) != getattr(other, field):
                return False
        return True

    def _asdict(self):
        return {k: getattr(self, k) for k in self._fields}

    def _replace(self, **kw):
        for field in self._fields:
            if field not in kw:
                kw[field] = getattr(self, field)
        result = self.__class__(**kw)
        result._metadata.update(self._metadata)
        return result


class _Metadata:
    def __init__(self, **fields):
        object.__setattr__(self, '_fields', fields)

    def __getattr__(self, name):
        return self._fields.get(name)

    def __setattr__(self, name, value):
        self._fields[name] = value

    def __len__(self):
        return len(self._fields)

    def copy(self):
        return _Metadata(**self._fields)

    def update(self, other):
        self._fields.update(other._fields)


class Rule:
    def __init__(self, name, parse, definition):
        self.name = name
        self.parse = parse
        self.definition = definition

    def __repr__(self):
        return (f'Rule(name={self.name!r}, parse={self.parse.__name__},'
            f' definition={self.definition!r})')


import struct


continue_flag = 1 << 7

def decode_signed_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    sign = 1 << 6
    if b & sign:
        result |= (~0 << shift)

    return result

def decode_unsigned_int(bytes):
    mask = 0xFF >> 1
    result = 0
    shift = 0

    for b in bytes:
        result |= (b & mask) << shift
        shift += 7

    return result


class SourcerError(Exception):
    """Common superclass for ParseError and PartialParseError."""


class ParseError(SourcerError):
    def __init__(self, message, index, line, column):
        super().__init__(message)
        self.position = _Position(index, line, column)


class PartialParseError(SourcerError):
    def __init__(self, partial_result, last_position, excerpt):
        super().__init__('Incomplete parse. Unexpected input on line'
            f' {last_position.line}, column {last_position.column}:\n{excerpt}')
        self.partial_result = partial_result
        self.last_position = last_position


class Infix(Node):
    _fields = ('left', 'operator', 'right')

    def __init__(self, left, operator, right):
        Node.__init__(self)
        self.left = left
        self.operator = operator
        self.right = right

    def __repr__(self):
        return f'Infix({self.left!r}, {self.operator!r}, {self.right!r})'


class Postfix(Node):
    _fields = ('left', 'operator')

    def __init__(self, left, operator):
        Node.__init__(self)
        self.left = left
        self.operator = operator

    def __repr__(self):
        return f'Postfix({self.left!r}, {self.operator!r})'


class Prefix(Node):
    _fields = ('operator', 'right')

    def __init__(self, operator, right):
        Node.__init__(self)
        self.operator = operator
        self.right = right

    def __repr__(self):
        return f'Prefix({self.operator!r}, {self.right!r})'


def parse(text, pos=0, fullparse=True):
    return _run(text, pos, _try_vec, fullparse)


_PositionInfo = _nt('_PositionInfo', 'start, end')

_Position = _nt('_Position', 'index, line, column')


class _ParseFunction(_nt('_ParseFunction', 'func, args, kwargs')):
    def __call__(self, _text, _pos):
        return self.func(_text, _pos, *self.args, **dict(self.kwargs))


class _StringLiteral(str):
    def __call__(self, _text, _pos):
        return self._parse_function(_text, _pos)


def _wrap_string_literal(string_value, parse_function):
    result = _StringLiteral(string_value)
    result._parse_function = parse_function
    return result


class _ByteLiteral(int):
    def __call__(self, _text, _pos):
        return self._parse_function(_text, _pos)


def _wrap_byte_literal(byte_value, parse_function):
    result = _ByteLiteral(byte_value)
    result._parse_function = parse_function
    return result


def _run(text, pos, start, fullparse):
    memo = {}
    result = None

    key = (3, start, pos)
    gtor = start(text, pos)
    stack = [(key, gtor)]

    while stack:
        key, gtor = stack[-1]
        result = gtor.send(result)

        if result[0] != 3:
            stack.pop()
            memo[key] = result
        elif result in memo:
            result = memo[result]
        else:
            gtor = result[1](text, result[2])
            stack.append((result, gtor))
            result = None

    if result[0]:
        return _finalize_parse_info(text, result[1], result[2], fullparse)
    else:
        pos = result[2]
        message = result[1](text, pos)
        raise ParseError(message, pos)


def visit(node):
    visited = set()
    stack = [node]
    while stack:
        node = stack.pop()

        if isinstance(node, (list, tuple)):
            stack.extend(node)

        elif isinstance(node, dict):
            stack.extend(node.values())

        elif isinstance(node, Node):
            node_id = id(node)
            if node_id in visited:
                continue
            visited.add(node_id)

            yield node

            if hasattr(node, '_fields'):
                stack.extend(getattr(node, x) for x in node._fields)


_Traversing = _nt('_Traversing', 'parent, field, child, is_finished')


def traverse(node):
    visited = set()
    stack = [_Traversing(parent=None, field=None, child=node, is_finished=False)]
    while stack:
        traversing = stack.pop()

        if traversing.is_finished:
            yield traversing
            continue

        child = traversing.child
        child_id = id(child)

        if child_id in visited:
            continue

        visited.add(child_id)
        stack.append(traversing._replace(is_finished=True))
        yield traversing

        def extend(items):
            stack.extend(reversed(list(items)))

        if isinstance(child, (list, tuple)):
            extend(
                _Traversing(parent=child, field=i, child=x, is_finished=False)
                for i, x in enumerate(child)
            )

        elif isinstance(child, dict):
            extend(
                _Traversing(parent=child, field=k, child=v, is_finished=False)
                for k, v in child.items()
            )

        elif isinstance(child, Node) and hasattr(child, '_fields'):
            extend(
                _Traversing(
                    parent=child,
                    field=x,
                    child=getattr(child, x),
                    is_finished=False,
                )
                for x in child._fields
            )


def transform(node, *callbacks):
    if not callbacks:
        return node

    if len(callbacks) == 1:
        callback = callbacks[0]
    else:
        def callback(node):
            for f in callbacks:
                node = f(node)
            return node

    return _transform(node, callback)


def _transform(node, callback):
    if isinstance(node, list):
        return [_transform(x, callback) for x in node]

    if not isinstance(node, Node):
        return node

    updates = {}
    for field in node._fields:
        was = getattr(node, field)
        now = _transform(was, callback)
        if now is not was:
            updates[field] = now
            if isinstance(was, Node) and isinstance(now, Node) and not now._metadata:
                now._metadata.update(was._metadata)

    if updates:
        node = node._replace(**updates)

    return callback(node)


def _finalize_parse_info(text, nodes, pos, fullparse):
    line_numbers, column_numbers = _map_index_to_line_and_column(text)

    for node in visit(nodes):
        pos_info = node._metadata.position_info
        if pos_info:
            start, end = pos_info
            end -= 1
            node._metadata.position_info = _PositionInfo(
                start=_Position(start, line_numbers[start], column_numbers[start]),
                end=_Position(end, line_numbers[end], column_numbers[end]),
            )

    if fullparse and pos < len(text):
        line, col = line_numbers[pos], column_numbers[pos]
        position = _Position(pos, line, col)
        excerpt = _extract_excerpt(text, pos, col)
        raise PartialParseError(nodes, position, excerpt)

    return nodes


def _extract_excerpt(text, pos, col):
    if isinstance(text, bytes):
        return repr(text[max(0, pos - 1) : pos + 2])

    start = pos - (col - 1)
    match = _compile_re('\n').search(text, pos + 1)
    end = len(text) if match is None else match.start()

    if end - start < 96:
        return text[start : end] + _caret_at(col - 1)

    if col < 60:
        # Chop the line off at the end.
        return text[start : start + 90] + ' ...' + _caret_at(col - 1)

    elif end - pos < 40:
        # Chop the line off at the start.
        return '... ' + text[end - 90 : end] + _caret_at(pos - (end - 90) + 4)

    else:
        # Chop the line off at both ends.
        return '... ' + text[pos - 42 : pos + 42] + ' ...' + _caret_at(42 + 4)


def _caret_at(index):
    return '\n' + (' ' * index) + '^'


def _get_line_and_column(text, pos):
    line_numbers, column_numbers = _map_index_to_line_and_column(text)
    return line_numbers[pos], column_numbers[pos]


def _map_index_to_line_and_column(text):
    line_numbers = []
    column_numbers = []

    current_line = 1
    current_column = 0

    for c in text:
        if c == '\n':
            current_line += 1
            current_column = 0
        else:
            current_column += 1
        line_numbers.append(current_line)
        column_numbers.append(current_column)

    return line_numbers, column_numbers

matcher1 = _compile_re(b'[\\x00-\\xFF]', flags=0).match
matcher2 = _compile_re(b'[\\x00-\\xFF]{4}', flags=0).match
matcher3 = _compile_re(b'[\\x00-\\xFF]{8}', flags=0).match
matcher4 = _compile_re(b'[\\x80-\\xFF]*[\\x00-\\x7F]', flags=0).match

def _try_vec(_text, _pos, element):
    # Rule 'vec'
    # Begin Let
    # let length = u32 in
    # element{length}
    # Begin Ref
    (_status, _result, _pos) = (yield (3, _try_u32, _pos))
    # End Ref
    if _status:
        length = _result
        # Begin List
        # element{length}
        staging1 = []
        while True:
            checkpoint1 = _pos
            # Begin Ref
            (_status, _result, _pos) = (yield (3, element, _pos))
            # End Ref
            if not (_status):
                _pos = checkpoint1
                break
            staging1.append(_result)
            if (len(staging1) == length):
                break
        if (len(staging1) >= length):
            _result = staging1
            _status = True
        # End List
    # End Let
    yield (_status, _result, _pos)

def _parse_vec(text, pos=0, fullparse=True):
    return _run(text, pos, _try_vec, fullparse)

vec = Rule('vec', _parse_vec, """
    vec(element) = let length = u32 in
    element{length}
""")
def _try_name(_text, _pos):
    # Rule 'name'
    # Begin Apply
    # vec(char) |> `lambda bytes: b''.join(bytes).decode('utf8')`
    # Begin Call
    # vec(char)
    func1 = _ParseFunction(_try_vec, (_try_char,), ())
    (_status, _result, _pos) = (yield (3, func1, _pos))
    # End Call
    if _status:
        arg1 = _result
        _result = lambda bytes: b''.join(bytes).decode('utf8')
        _status = True
        _result = _result(arg1)
    # End Apply
    yield (_status, _result, _pos)

def _parse_name(text, pos=0, fullparse=True):
    return _run(text, pos, _try_name, fullparse)

name = Rule('name', _parse_name, """
    name = vec(char) |> `lambda bytes: b''.join(bytes).decode('utf8')`
""")
def _try_char(_text, _pos):
    # Rule 'char'
    # Begin Regex
    # /[\\x00-\\xFF]/
    match1 = matcher1(_text, _pos)
    if match1:
        _result = match1.group(0)
        _pos = match1.end()
        _status = True
    else:
        _result = _raise_error13
        _status = False
    # End Regex
    yield (_status, _result, _pos)

def _parse_char(text, pos=0, fullparse=True):
    return _run(text, pos, _try_char, fullparse)

char = Rule('char', _parse_char, """
    char = /[\\x00-\\xFF]/
""")
def _raise_error13(_text, _pos):
    if (len(_text) <= _pos):
        title = 'Unexpected end of input.'
        line = None
        col = None
    else:
        (line, col) = _get_line_and_column(_text, _pos)
        excerpt = _extract_excerpt(_text, _pos, col)
        title = f'Error on line {line}, column {col}:\n{excerpt}\n'
    details = (
    "Failed to parse the 'char' rule, at the expression:\n"
    '    /[\\\\x00-\\\\xFF]/\n\n'
    "Expected to match the regular expression /b'[\\\\x00-\\\\xFF]'/"
    )
    raise ParseError((title + details), _pos, line, col)

def _try_byte(_text, _pos):
    # Rule 'byte'
    # Begin Apply
    # /[\\x00-\\xFF]/ |> `ord`
    # Begin Regex
    # /[\\x00-\\xFF]/
    match2 = matcher1(_text, _pos)
    if match2:
        _result = match2.group(0)
        _pos = match2.end()
        _status = True
    else:
        _result = _raise_error16
        _status = False
    # End Regex
    if _status:
        arg2 = _result
        _result = ord
        _status = True
        _result = _result(arg2)
    # End Apply
    yield (_status, _result, _pos)

def _parse_byte(text, pos=0, fullparse=True):
    return _run(text, pos, _try_byte, fullparse)

byte = Rule('byte', _parse_byte, """
    byte = /[\\x00-\\xFF]/ |> `ord`
""")
def _raise_error16(_text, _pos):
    if (len(_text) <= _pos):
        title = 'Unexpected end of input.'
        line = None
        col = None
    else:
        (line, col) = _get_line_and_column(_text, _pos)
        excerpt = _extract_excerpt(_text, _pos, col)
        title = f'Error on line {line}, column {col}:\n{excerpt}\n'
    details = (
    "Failed to parse the 'byte' rule, at the expression:\n"
    '    /[\\\\x00-\\\\xFF]/\n\n'
    "Expected to match the regular expression /b'[\\\\x00-\\\\xFF]'/"
    )
    raise ParseError((title + details), _pos, line, col)

def _try_u32(_text, _pos):
    # Rule 'u32'
    # Begin Ref
    (_status, _result, _pos) = (yield (3, _try_UnsignedInt, _pos))
    # End Ref
    yield (_status, _result, _pos)

def _parse_u32(text, pos=0, fullparse=True):
    return _run(text, pos, _try_u32, fullparse)

u32 = Rule('u32', _parse_u32, """
    u32 = UnsignedInt
""")
def _try_i32(_text, _pos):
    # Rule 'i32'
    # Begin Ref
    (_status, _result, _pos) = (yield (3, _try_SignedInt, _pos))
    # End Ref
    yield (_status, _result, _pos)

def _parse_i32(text, pos=0, fullparse=True):
    return _run(text, pos, _try_i32, fullparse)

i32 = Rule('i32', _parse_i32, """
    i32 = SignedInt
""")
def _try_i64(_text, _pos):
    # Rule 'i64'
    # Begin Ref
    (_status, _result, _pos) = (yield (3, _try_SignedInt, _pos))
    # End Ref
    yield (_status, _result, _pos)

def _parse_i64(text, pos=0, fullparse=True):
    return _run(text, pos, _try_i64, fullparse)

i64 = Rule('i64', _parse_i64, """
    i64 = SignedInt
""")
def _try_f32(_text, _pos):
    # Rule 'f32'
    # Begin Apply
    # /[\\x00-\\xFF]{4}/ |> `lambda x: struct.unpack('<f', x)[0]`
    # Begin Regex
    # /[\\x00-\\xFF]{4}/
    match3 = matcher2(_text, _pos)
    if match3:
        _result = match3.group(0)
        _pos = match3.end()
        _status = True
    else:
        _result = _raise_error26
        _status = False
    # End Regex
    if _status:
        arg3 = _result
        _result = lambda x: struct.unpack('<f', x)[0]
        _status = True
        _result = _result(arg3)
    # End Apply
    yield (_status, _result, _pos)

def _parse_f32(text, pos=0, fullparse=True):
    return _run(text, pos, _try_f32, fullparse)

f32 = Rule('f32', _parse_f32, """
    f32 = /[\\x00-\\xFF]{4}/ |> `lambda x: struct.unpack('<f', x)[0]`
""")
def _raise_error26(_text, _pos):
    if (len(_text) <= _pos):
        title = 'Unexpected end of input.'
        line = None
        col = None
    else:
        (line, col) = _get_line_and_column(_text, _pos)
        excerpt = _extract_excerpt(_text, _pos, col)
        title = f'Error on line {line}, column {col}:\n{excerpt}\n'
    details = (
    "Failed to parse the 'f32' rule, at the expression:\n"
    '    /[\\\\x00-\\\\xFF]{4}/\n\n'
    "Expected to match the regular expression /b'[\\\\x00-\\\\xFF]{4}'/"
    )
    raise ParseError((title + details), _pos, line, col)

def _try_f64(_text, _pos):
    # Rule 'f64'
    # Begin Apply
    # /[\\x00-\\xFF]{8}/ |> `lambda x: struct.unpack('<d', x)[0]`
    # Begin Regex
    # /[\\x00-\\xFF]{8}/
    match4 = matcher3(_text, _pos)
    if match4:
        _result = match4.group(0)
        _pos = match4.end()
        _status = True
    else:
        _result = _raise_error30
        _status = False
    # End Regex
    if _status:
        arg4 = _result
        _result = lambda x: struct.unpack('<d', x)[0]
        _status = True
        _result = _result(arg4)
    # End Apply
    yield (_status, _result, _pos)

def _parse_f64(text, pos=0, fullparse=True):
    return _run(text, pos, _try_f64, fullparse)

f64 = Rule('f64', _parse_f64, """
    f64 = /[\\x00-\\xFF]{8}/ |> `lambda x: struct.unpack('<d', x)[0]`
""")
def _raise_error30(_text, _pos):
    if (len(_text) <= _pos):
        title = 'Unexpected end of input.'
        line = None
        col = None
    else:
        (line, col) = _get_line_and_column(_text, _pos)
        excerpt = _extract_excerpt(_text, _pos, col)
        title = f'Error on line {line}, column {col}:\n{excerpt}\n'
    details = (
    "Failed to parse the 'f64' rule, at the expression:\n"
    '    /[\\\\x00-\\\\xFF]{8}/\n\n'
    "Expected to match the regular expression /b'[\\\\x00-\\\\xFF]{8}'/"
    )
    raise ParseError((title + details), _pos, line, col)

def _try_SignedInt(_text, _pos):
    # Rule 'SignedInt'
    # Begin Apply
    # LEB128 |> `decode_signed_int`
    # Begin Ref
    (_status, _result, _pos) = (yield (3, _try_LEB128, _pos))
    # End Ref
    if _status:
        arg5 = _result
        _result = decode_signed_int
        _status = True
        _result = _result(arg5)
    # End Apply
    yield (_status, _result, _pos)

def _parse_SignedInt(text, pos=0, fullparse=True):
    return _run(text, pos, _try_SignedInt, fullparse)

SignedInt = Rule('SignedInt', _parse_SignedInt, """
    SignedInt = LEB128 |> `decode_signed_int`
""")
def _try_UnsignedInt(_text, _pos):
    # Rule 'UnsignedInt'
    # Begin Apply
    # LEB128 |> `decode_unsigned_int`
    # Begin Ref
    (_status, _result, _pos) = (yield (3, _try_LEB128, _pos))
    # End Ref
    if _status:
        arg6 = _result
        _result = decode_unsigned_int
        _status = True
        _result = _result(arg6)
    # End Apply
    yield (_status, _result, _pos)

def _parse_UnsignedInt(text, pos=0, fullparse=True):
    return _run(text, pos, _try_UnsignedInt, fullparse)

UnsignedInt = Rule('UnsignedInt', _parse_UnsignedInt, """
    UnsignedInt = LEB128 |> `decode_unsigned_int`
""")
def _try_LEB128(_text, _pos):
    # Rule 'LEB128'
    # Begin Regex
    # /[\\x80-\\xFF]*[\\x00-\\x7F]/
    match5 = matcher4(_text, _pos)
    if match5:
        _result = match5.group(0)
        _pos = match5.end()
        _status = True
    else:
        _result = _raise_error41
        _status = False
    # End Regex
    yield (_status, _result, _pos)

def _parse_LEB128(text, pos=0, fullparse=True):
    return _run(text, pos, _try_LEB128, fullparse)

LEB128 = Rule('LEB128', _parse_LEB128, """
    LEB128 = /[\\x80-\\xFF]*[\\x00-\\x7F]/
""")
def _raise_error41(_text, _pos):
    if (len(_text) <= _pos):
        title = 'Unexpected end of input.'
        line = None
        col = None
    else:
        (line, col) = _get_line_and_column(_text, _pos)
        excerpt = _extract_excerpt(_text, _pos, col)
        title = f'Error on line {line}, column {col}:\n{excerpt}\n'
    details = (
    "Failed to parse the 'LEB128' rule, at the expression:\n"
    '    /[\\\\x80-\\\\xFF]*[\\\\x00-\\\\x7F]/\n\n'
    "Expected to match the regular expression /b'[\\\\x80-\\\\xFF]*[\\\\x00-\\\\x7F]'/"
    )
    raise ParseError((title + details), _pos, line, col)

